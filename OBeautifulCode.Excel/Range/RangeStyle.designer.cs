// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.106.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Excel
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Drawing;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class RangeStyle : IModel<RangeStyle>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="RangeStyle"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(RangeStyle left, RangeStyle right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="RangeStyle"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(RangeStyle left, RangeStyle right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(RangeStyle other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.BackgroundColor.IsEqualTo(other.BackgroundColor)
                      && this.FontColor.IsEqualTo(other.FontColor)
                      && this.FontName.IsEqualTo(other.FontName, StringComparer.Ordinal)
                      && this.FontSize.IsEqualTo(other.FontSize)
                      && this.FontIsItalic.IsEqualTo(other.FontIsItalic)
                      && this.FontIsBold.IsEqualTo(other.FontIsBold)
                      && this.FontUnderline.IsEqualTo(other.FontUnderline)
                      && this.FontRotationAngle.IsEqualTo(other.FontRotationAngle)
                      && this.TextIsWrapped.IsEqualTo(other.TextIsWrapped)
                      && this.IndentLevel.IsEqualTo(other.IndentLevel)
                      && this.RowHeightInPixels.IsEqualTo(other.RowHeightInPixels)
                      && this.ColumnWidthInPixels.IsEqualTo(other.ColumnWidthInPixels)
                      && this.VerticalAlignment.IsEqualTo(other.VerticalAlignment)
                      && this.HorizontalAlignment.IsEqualTo(other.HorizontalAlignment)
                      && this.MergeCells.IsEqualTo(other.MergeCells)
                      && this.AutofitRows.IsEqualTo(other.AutofitRows)
                      && this.InsideBorder.IsEqualTo(other.InsideBorder)
                      && this.OutsideBorder.IsEqualTo(other.OutsideBorder)
                      && this.DataValidation.IsEqualTo(other.DataValidation)
                      && this.Format.IsEqualTo(other.Format)
                      && this.CustomFormatString.IsEqualTo(other.CustomFormatString, StringComparer.Ordinal);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as RangeStyle);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.BackgroundColor)
            .Hash(this.FontColor)
            .Hash(this.FontName)
            .Hash(this.FontSize)
            .Hash(this.FontIsItalic)
            .Hash(this.FontIsBold)
            .Hash(this.FontUnderline)
            .Hash(this.FontRotationAngle)
            .Hash(this.TextIsWrapped)
            .Hash(this.IndentLevel)
            .Hash(this.RowHeightInPixels)
            .Hash(this.ColumnWidthInPixels)
            .Hash(this.VerticalAlignment)
            .Hash(this.HorizontalAlignment)
            .Hash(this.MergeCells)
            .Hash(this.AutofitRows)
            .Hash(this.InsideBorder)
            .Hash(this.OutsideBorder)
            .Hash(this.DataValidation)
            .Hash(this.Format)
            .Hash(this.CustomFormatString)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public RangeStyle DeepClone()
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="BackgroundColor" />.
        /// </summary>
        /// <param name="backgroundColor">The new <see cref="BackgroundColor" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="backgroundColor" /> for <see cref="BackgroundColor" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithBackgroundColor(Color? backgroundColor)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = backgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontColor" />.
        /// </summary>
        /// <param name="fontColor">The new <see cref="FontColor" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="fontColor" /> for <see cref="FontColor" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFontColor(Color? fontColor)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = fontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontName" />.
        /// </summary>
        /// <param name="fontName">The new <see cref="FontName" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="fontName" /> for <see cref="FontName" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFontName(string fontName)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = fontName,
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontSize" />.
        /// </summary>
        /// <param name="fontSize">The new <see cref="FontSize" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="fontSize" /> for <see cref="FontSize" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFontSize(int? fontSize)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = fontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontIsItalic" />.
        /// </summary>
        /// <param name="fontIsItalic">The new <see cref="FontIsItalic" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="fontIsItalic" /> for <see cref="FontIsItalic" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFontIsItalic(bool? fontIsItalic)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = fontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontIsBold" />.
        /// </summary>
        /// <param name="fontIsBold">The new <see cref="FontIsBold" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="fontIsBold" /> for <see cref="FontIsBold" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFontIsBold(bool? fontIsBold)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = fontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontUnderline" />.
        /// </summary>
        /// <param name="fontUnderline">The new <see cref="FontUnderline" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="fontUnderline" /> for <see cref="FontUnderline" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFontUnderline(UnderlineKind? fontUnderline)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = fontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontRotationAngle" />.
        /// </summary>
        /// <param name="fontRotationAngle">The new <see cref="FontRotationAngle" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="fontRotationAngle" /> for <see cref="FontRotationAngle" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFontRotationAngle(int? fontRotationAngle)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = fontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="TextIsWrapped" />.
        /// </summary>
        /// <param name="textIsWrapped">The new <see cref="TextIsWrapped" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="textIsWrapped" /> for <see cref="TextIsWrapped" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithTextIsWrapped(bool? textIsWrapped)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = textIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IndentLevel" />.
        /// </summary>
        /// <param name="indentLevel">The new <see cref="IndentLevel" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="indentLevel" /> for <see cref="IndentLevel" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithIndentLevel(int? indentLevel)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = indentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="RowHeightInPixels" />.
        /// </summary>
        /// <param name="rowHeightInPixels">The new <see cref="RowHeightInPixels" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="rowHeightInPixels" /> for <see cref="RowHeightInPixels" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithRowHeightInPixels(int? rowHeightInPixels)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = rowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ColumnWidthInPixels" />.
        /// </summary>
        /// <param name="columnWidthInPixels">The new <see cref="ColumnWidthInPixels" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="columnWidthInPixels" /> for <see cref="ColumnWidthInPixels" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithColumnWidthInPixels(int? columnWidthInPixels)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = columnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="VerticalAlignment" />.
        /// </summary>
        /// <param name="verticalAlignment">The new <see cref="VerticalAlignment" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="verticalAlignment" /> for <see cref="VerticalAlignment" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithVerticalAlignment(VerticalAlignment? verticalAlignment)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = verticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HorizontalAlignment" />.
        /// </summary>
        /// <param name="horizontalAlignment">The new <see cref="HorizontalAlignment" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="horizontalAlignment" /> for <see cref="HorizontalAlignment" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithHorizontalAlignment(HorizontalAlignment? horizontalAlignment)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = horizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="MergeCells" />.
        /// </summary>
        /// <param name="mergeCells">The new <see cref="MergeCells" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="mergeCells" /> for <see cref="MergeCells" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithMergeCells(bool? mergeCells)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = mergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="AutofitRows" />.
        /// </summary>
        /// <param name="autofitRows">The new <see cref="AutofitRows" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="autofitRows" /> for <see cref="AutofitRows" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithAutofitRows(bool? autofitRows)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = autofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="InsideBorder" />.
        /// </summary>
        /// <param name="insideBorder">The new <see cref="InsideBorder" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="insideBorder" /> for <see cref="InsideBorder" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithInsideBorder(Border insideBorder)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = insideBorder,
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="OutsideBorder" />.
        /// </summary>
        /// <param name="outsideBorder">The new <see cref="OutsideBorder" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="outsideBorder" /> for <see cref="OutsideBorder" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithOutsideBorder(Border outsideBorder)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = outsideBorder,
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="DataValidation" />.
        /// </summary>
        /// <param name="dataValidation">The new <see cref="DataValidation" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="dataValidation" /> for <see cref="DataValidation" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithDataValidation(DataValidation dataValidation)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = dataValidation,
                                 Format              = this.Format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Format" />.
        /// </summary>
        /// <param name="format">The new <see cref="Format" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="format" /> for <see cref="Format" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithFormat(Format? format)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = format,
                                 CustomFormatString  = this.CustomFormatString?.Clone().ToString(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CustomFormatString" />.
        /// </summary>
        /// <param name="customFormatString">The new <see cref="CustomFormatString" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="RangeStyle" /> using the specified <paramref name="customFormatString" /> for <see cref="CustomFormatString" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public RangeStyle DeepCloneWithCustomFormatString(string customFormatString)
        {
            var result = new RangeStyle
                             {
                                 BackgroundColor     = this.BackgroundColor,
                                 FontColor           = this.FontColor,
                                 FontName            = this.FontName?.Clone().ToString(),
                                 FontSize            = this.FontSize,
                                 FontIsItalic        = this.FontIsItalic,
                                 FontIsBold          = this.FontIsBold,
                                 FontUnderline       = this.FontUnderline,
                                 FontRotationAngle   = this.FontRotationAngle,
                                 TextIsWrapped       = this.TextIsWrapped,
                                 IndentLevel         = this.IndentLevel,
                                 RowHeightInPixels   = this.RowHeightInPixels,
                                 ColumnWidthInPixels = this.ColumnWidthInPixels,
                                 VerticalAlignment   = this.VerticalAlignment,
                                 HorizontalAlignment = this.HorizontalAlignment,
                                 MergeCells          = this.MergeCells,
                                 AutofitRows         = this.AutofitRows,
                                 InsideBorder        = this.InsideBorder?.DeepClone(),
                                 OutsideBorder       = this.OutsideBorder?.DeepClone(),
                                 DataValidation      = this.DataValidation?.DeepClone(),
                                 Format              = this.Format,
                                 CustomFormatString  = customFormatString,
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.Excel.RangeStyle: BackgroundColor = {this.BackgroundColor?.ToString() ?? "<null>"}, FontColor = {this.FontColor?.ToString() ?? "<null>"}, FontName = {this.FontName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontSize = {this.FontSize?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontIsItalic = {this.FontIsItalic?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontIsBold = {this.FontIsBold?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontUnderline = {this.FontUnderline?.ToString() ?? "<null>"}, FontRotationAngle = {this.FontRotationAngle?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, TextIsWrapped = {this.TextIsWrapped?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IndentLevel = {this.IndentLevel?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, RowHeightInPixels = {this.RowHeightInPixels?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ColumnWidthInPixels = {this.ColumnWidthInPixels?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, VerticalAlignment = {this.VerticalAlignment?.ToString() ?? "<null>"}, HorizontalAlignment = {this.HorizontalAlignment?.ToString() ?? "<null>"}, MergeCells = {this.MergeCells?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, AutofitRows = {this.AutofitRows?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, InsideBorder = {this.InsideBorder?.ToString() ?? "<null>"}, OutsideBorder = {this.OutsideBorder?.ToString() ?? "<null>"}, DataValidation = {this.DataValidation?.ToString() ?? "<null>"}, Format = {this.Format?.ToString() ?? "<null>"}, CustomFormatString = {this.CustomFormatString?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}.");

            return result;
        }
    }
}