// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.86.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Excel
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Drawing;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class Comment : IModel<Comment>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="Comment"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(Comment left, Comment right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="Comment"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(Comment left, Comment right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(Comment other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.Body.IsEqualTo(other.Body, StringComparer.Ordinal)
                      && this.HtmlBody.IsEqualTo(other.HtmlBody, StringComparer.Ordinal)
                      && this.FontName.IsEqualTo(other.FontName, StringComparer.Ordinal)
                      && this.FontColor.IsEqualTo(other.FontColor)
                      && this.FontSize.IsEqualTo(other.FontSize)
                      && this.FontIsBold.IsEqualTo(other.FontIsBold)
                      && this.HorizontalAlignment.IsEqualTo(other.HorizontalAlignment)
                      && this.VerticalAlignment.IsEqualTo(other.VerticalAlignment)
                      && this.AutoSize.IsEqualTo(other.AutoSize)
                      && this.HeightInInches.IsEqualTo(other.HeightInInches)
                      && this.WidthInInches.IsEqualTo(other.WidthInInches)
                      && this.FillColor.IsEqualTo(other.FillColor)
                      && this.FillTransparency.IsEqualTo(other.FillTransparency)
                      && this.BorderColor.IsEqualTo(other.BorderColor)
                      && this.BorderStyle.IsEqualTo(other.BorderStyle)
                      && this.BorderWeightInPoints.IsEqualTo(other.BorderWeightInPoints);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as Comment);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.Body)
            .Hash(this.HtmlBody)
            .Hash(this.FontName)
            .Hash(this.FontColor)
            .Hash(this.FontSize)
            .Hash(this.FontIsBold)
            .Hash(this.HorizontalAlignment)
            .Hash(this.VerticalAlignment)
            .Hash(this.AutoSize)
            .Hash(this.HeightInInches)
            .Hash(this.WidthInInches)
            .Hash(this.FillColor)
            .Hash(this.FillTransparency)
            .Hash(this.BorderColor)
            .Hash(this.BorderStyle)
            .Hash(this.BorderWeightInPoints)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public Comment DeepClone()
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Body" />.
        /// </summary>
        /// <param name="body">The new <see cref="Body" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="body" /> for <see cref="Body" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithBody(string body)
        {
            var result = new Comment
                             {
                                 Body                 = body,
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HtmlBody" />.
        /// </summary>
        /// <param name="htmlBody">The new <see cref="HtmlBody" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="htmlBody" /> for <see cref="HtmlBody" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithHtmlBody(string htmlBody)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = htmlBody,
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontName" />.
        /// </summary>
        /// <param name="fontName">The new <see cref="FontName" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="fontName" /> for <see cref="FontName" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithFontName(string fontName)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = fontName,
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontColor" />.
        /// </summary>
        /// <param name="fontColor">The new <see cref="FontColor" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="fontColor" /> for <see cref="FontColor" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithFontColor(Color? fontColor)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = fontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontSize" />.
        /// </summary>
        /// <param name="fontSize">The new <see cref="FontSize" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="fontSize" /> for <see cref="FontSize" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithFontSize(int? fontSize)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = fontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FontIsBold" />.
        /// </summary>
        /// <param name="fontIsBold">The new <see cref="FontIsBold" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="fontIsBold" /> for <see cref="FontIsBold" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithFontIsBold(bool? fontIsBold)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = fontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HorizontalAlignment" />.
        /// </summary>
        /// <param name="horizontalAlignment">The new <see cref="HorizontalAlignment" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="horizontalAlignment" /> for <see cref="HorizontalAlignment" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithHorizontalAlignment(HorizontalAlignment? horizontalAlignment)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = horizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="VerticalAlignment" />.
        /// </summary>
        /// <param name="verticalAlignment">The new <see cref="VerticalAlignment" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="verticalAlignment" /> for <see cref="VerticalAlignment" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithVerticalAlignment(VerticalAlignment? verticalAlignment)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = verticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="AutoSize" />.
        /// </summary>
        /// <param name="autoSize">The new <see cref="AutoSize" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="autoSize" /> for <see cref="AutoSize" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithAutoSize(bool? autoSize)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = autoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HeightInInches" />.
        /// </summary>
        /// <param name="heightInInches">The new <see cref="HeightInInches" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="heightInInches" /> for <see cref="HeightInInches" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithHeightInInches(decimal? heightInInches)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = heightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="WidthInInches" />.
        /// </summary>
        /// <param name="widthInInches">The new <see cref="WidthInInches" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="widthInInches" /> for <see cref="WidthInInches" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithWidthInInches(decimal? widthInInches)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = widthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FillColor" />.
        /// </summary>
        /// <param name="fillColor">The new <see cref="FillColor" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="fillColor" /> for <see cref="FillColor" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithFillColor(Color? fillColor)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = fillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FillTransparency" />.
        /// </summary>
        /// <param name="fillTransparency">The new <see cref="FillTransparency" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="fillTransparency" /> for <see cref="FillTransparency" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithFillTransparency(decimal? fillTransparency)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = fillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="BorderColor" />.
        /// </summary>
        /// <param name="borderColor">The new <see cref="BorderColor" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="borderColor" /> for <see cref="BorderColor" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithBorderColor(Color? borderColor)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = borderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="BorderStyle" />.
        /// </summary>
        /// <param name="borderStyle">The new <see cref="BorderStyle" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="borderStyle" /> for <see cref="BorderStyle" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithBorderStyle(CommentBorderStyle? borderStyle)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = borderStyle,
                                 BorderWeightInPoints = this.BorderWeightInPoints,
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="BorderWeightInPoints" />.
        /// </summary>
        /// <param name="borderWeightInPoints">The new <see cref="BorderWeightInPoints" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="Comment" /> using the specified <paramref name="borderWeightInPoints" /> for <see cref="BorderWeightInPoints" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public Comment DeepCloneWithBorderWeightInPoints(decimal? borderWeightInPoints)
        {
            var result = new Comment
                             {
                                 Body                 = this.Body?.Clone().ToString(),
                                 HtmlBody             = this.HtmlBody?.Clone().ToString(),
                                 FontName             = this.FontName?.Clone().ToString(),
                                 FontColor            = this.FontColor,
                                 FontSize             = this.FontSize,
                                 FontIsBold           = this.FontIsBold,
                                 HorizontalAlignment  = this.HorizontalAlignment,
                                 VerticalAlignment    = this.VerticalAlignment,
                                 AutoSize             = this.AutoSize,
                                 HeightInInches       = this.HeightInInches,
                                 WidthInInches        = this.WidthInInches,
                                 FillColor            = this.FillColor,
                                 FillTransparency     = this.FillTransparency,
                                 BorderColor          = this.BorderColor,
                                 BorderStyle          = this.BorderStyle,
                                 BorderWeightInPoints = borderWeightInPoints,
                             };

            return result;
        }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.Excel.Comment: Body = {this.Body?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, HtmlBody = {this.HtmlBody?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontName = {this.FontName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontColor = {this.FontColor?.ToString() ?? "<null>"}, FontSize = {this.FontSize?.ToString() ?? "<null>"}, FontIsBold = {this.FontIsBold?.ToString() ?? "<null>"}, HorizontalAlignment = {this.HorizontalAlignment?.ToString() ?? "<null>"}, VerticalAlignment = {this.VerticalAlignment?.ToString() ?? "<null>"}, AutoSize = {this.AutoSize?.ToString() ?? "<null>"}, HeightInInches = {this.HeightInInches?.ToString() ?? "<null>"}, WidthInInches = {this.WidthInInches?.ToString() ?? "<null>"}, FillColor = {this.FillColor?.ToString() ?? "<null>"}, FillTransparency = {this.FillTransparency?.ToString() ?? "<null>"}, BorderColor = {this.BorderColor?.ToString() ?? "<null>"}, BorderStyle = {this.BorderStyle?.ToString() ?? "<null>"}, BorderWeightInPoints = {this.BorderWeightInPoints?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}