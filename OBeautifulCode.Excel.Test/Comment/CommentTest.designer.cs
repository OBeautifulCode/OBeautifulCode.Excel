// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.86.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Excel.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Drawing;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class CommentTest
    {
        private static readonly StringRepresentationTestScenarios<Comment> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<Comment>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<Comment>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var result = new SystemUnderTestExpectedStringRepresentation<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.Excel.Comment: Body = {systemUnderTest.Body?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, HtmlBody = {systemUnderTest.HtmlBody?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontName = {systemUnderTest.FontName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontColor = {systemUnderTest.FontColor?.ToString() ?? "<null>"}, FontSize = {systemUnderTest.FontSize?.ToString() ?? "<null>"}, FontIsBold = {systemUnderTest.FontIsBold?.ToString() ?? "<null>"}, HorizontalAlignment = {systemUnderTest.HorizontalAlignment?.ToString() ?? "<null>"}, VerticalAlignment = {systemUnderTest.VerticalAlignment?.ToString() ?? "<null>"}, AutoSize = {systemUnderTest.AutoSize?.ToString() ?? "<null>"}, HeightInInches = {systemUnderTest.HeightInInches?.ToString() ?? "<null>"}, WidthInInches = {systemUnderTest.WidthInInches?.ToString() ?? "<null>"}, FillColor = {systemUnderTest.FillColor?.ToString() ?? "<null>"}, FillTransparency = {systemUnderTest.FillTransparency?.ToString() ?? "<null>"}, BorderColor = {systemUnderTest.BorderColor?.ToString() ?? "<null>"}, BorderStyle = {systemUnderTest.BorderStyle?.ToString() ?? "<null>"}, BorderWeightInPoints = {systemUnderTest.BorderWeightInPoints?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<Comment> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<Comment>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithBody should deep clone object and replace Body with the provided body",
                    WithPropertyName = "Body",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.Body.IsEqualTo(_.Body));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Body,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithHtmlBody should deep clone object and replace HtmlBody with the provided htmlBody",
                    WithPropertyName = "HtmlBody",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.HtmlBody.IsEqualTo(_.HtmlBody));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.HtmlBody,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithFontName should deep clone object and replace FontName with the provided fontName",
                    WithPropertyName = "FontName",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.FontName.IsEqualTo(_.FontName));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontName,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithFontColor should deep clone object and replace FontColor with the provided fontColor",
                    WithPropertyName = "FontColor",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.FontColor.IsEqualTo(_.FontColor));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontColor,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithFontSize should deep clone object and replace FontSize with the provided fontSize",
                    WithPropertyName = "FontSize",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.FontSize.IsEqualTo(_.FontSize));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontSize,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithFontIsBold should deep clone object and replace FontIsBold with the provided fontIsBold",
                    WithPropertyName = "FontIsBold",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.FontIsBold.IsEqualTo(_.FontIsBold));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontIsBold,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithHorizontalAlignment should deep clone object and replace HorizontalAlignment with the provided horizontalAlignment",
                    WithPropertyName = "HorizontalAlignment",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.HorizontalAlignment.IsEqualTo(_.HorizontalAlignment));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.HorizontalAlignment,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithVerticalAlignment should deep clone object and replace VerticalAlignment with the provided verticalAlignment",
                    WithPropertyName = "VerticalAlignment",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.VerticalAlignment.IsEqualTo(_.VerticalAlignment));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.VerticalAlignment,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithAutoSize should deep clone object and replace AutoSize with the provided autoSize",
                    WithPropertyName = "AutoSize",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.AutoSize.IsEqualTo(_.AutoSize));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.AutoSize,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithHeightInInches should deep clone object and replace HeightInInches with the provided heightInInches",
                    WithPropertyName = "HeightInInches",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.HeightInInches.IsEqualTo(_.HeightInInches));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.HeightInInches,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithWidthInInches should deep clone object and replace WidthInInches with the provided widthInInches",
                    WithPropertyName = "WidthInInches",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.WidthInInches.IsEqualTo(_.WidthInInches));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.WidthInInches,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithFillColor should deep clone object and replace FillColor with the provided fillColor",
                    WithPropertyName = "FillColor",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.FillColor.IsEqualTo(_.FillColor));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FillColor,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithFillTransparency should deep clone object and replace FillTransparency with the provided fillTransparency",
                    WithPropertyName = "FillTransparency",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.FillTransparency.IsEqualTo(_.FillTransparency));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FillTransparency,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithBorderColor should deep clone object and replace BorderColor with the provided borderColor",
                    WithPropertyName = "BorderColor",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.BorderColor.IsEqualTo(_.BorderColor));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.BorderColor,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithBorderStyle should deep clone object and replace BorderStyle with the provided borderStyle",
                    WithPropertyName = "BorderStyle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.BorderStyle.IsEqualTo(_.BorderStyle));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.BorderStyle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<Comment>
                {
                    Name = "DeepCloneWithBorderWeightInPoints should deep clone object and replace BorderWeightInPoints with the provided borderWeightInPoints",
                    WithPropertyName = "BorderWeightInPoints",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<Comment>();

                        var referenceObject = A.Dummy<Comment>().ThatIs(_ => !systemUnderTest.BorderWeightInPoints.IsEqualTo(_.BorderWeightInPoints));

                        var result = new SystemUnderTestDeepCloneWithValue<Comment>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.BorderWeightInPoints,
                        };

                        return result;
                    },
                });

        private static readonly Comment ReferenceObjectForEquatableTestScenarios = A.Dummy<Comment>();

        private static readonly EquatableTestScenarios<Comment> EquatableTestScenarios = new EquatableTestScenarios<Comment>()
            .AddScenario(() =>
                new EquatableTestScenario<Comment>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new Comment[]
                    {
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new Comment[]
                    {
                        new Comment
                            {
                                Body                 = A.Dummy<Comment>().Whose(_ => !_.Body.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Body)).Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = A.Dummy<Comment>().Whose(_ => !_.HtmlBody.IsEqualTo(ReferenceObjectForEquatableTestScenarios.HtmlBody)).HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = A.Dummy<Comment>().Whose(_ => !_.FontName.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontName)).FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = A.Dummy<Comment>().Whose(_ => !_.FontColor.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontColor)).FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = A.Dummy<Comment>().Whose(_ => !_.FontSize.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontSize)).FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = A.Dummy<Comment>().Whose(_ => !_.FontIsBold.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontIsBold)).FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = A.Dummy<Comment>().Whose(_ => !_.HorizontalAlignment.IsEqualTo(ReferenceObjectForEquatableTestScenarios.HorizontalAlignment)).HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = A.Dummy<Comment>().Whose(_ => !_.VerticalAlignment.IsEqualTo(ReferenceObjectForEquatableTestScenarios.VerticalAlignment)).VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = A.Dummy<Comment>().Whose(_ => !_.AutoSize.IsEqualTo(ReferenceObjectForEquatableTestScenarios.AutoSize)).AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = A.Dummy<Comment>().Whose(_ => !_.HeightInInches.IsEqualTo(ReferenceObjectForEquatableTestScenarios.HeightInInches)).HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = A.Dummy<Comment>().Whose(_ => !_.WidthInInches.IsEqualTo(ReferenceObjectForEquatableTestScenarios.WidthInInches)).WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = A.Dummy<Comment>().Whose(_ => !_.FillColor.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FillColor)).FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = A.Dummy<Comment>().Whose(_ => !_.FillTransparency.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FillTransparency)).FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = A.Dummy<Comment>().Whose(_ => !_.BorderColor.IsEqualTo(ReferenceObjectForEquatableTestScenarios.BorderColor)).BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = A.Dummy<Comment>().Whose(_ => !_.BorderStyle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.BorderStyle)).BorderStyle,
                                BorderWeightInPoints = ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints,
                            },
                        new Comment
                            {
                                Body                 = ReferenceObjectForEquatableTestScenarios.Body,
                                HtmlBody             = ReferenceObjectForEquatableTestScenarios.HtmlBody,
                                FontName             = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontColor            = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontSize             = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsBold           = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                HorizontalAlignment  = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                VerticalAlignment    = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                AutoSize             = ReferenceObjectForEquatableTestScenarios.AutoSize,
                                HeightInInches       = ReferenceObjectForEquatableTestScenarios.HeightInInches,
                                WidthInInches        = ReferenceObjectForEquatableTestScenarios.WidthInInches,
                                FillColor            = ReferenceObjectForEquatableTestScenarios.FillColor,
                                FillTransparency     = ReferenceObjectForEquatableTestScenarios.FillTransparency,
                                BorderColor          = ReferenceObjectForEquatableTestScenarios.BorderColor,
                                BorderStyle          = ReferenceObjectForEquatableTestScenarios.BorderStyle,
                                BorderWeightInPoints = A.Dummy<Comment>().Whose(_ => !_.BorderWeightInPoints.IsEqualTo(ReferenceObjectForEquatableTestScenarios.BorderWeightInPoints)).BorderWeightInPoints,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Comment___Should_implement_IModel_of_Comment___When_reflecting()
            {
                // Arrange
                var type = typeof(Comment);

                var expectedModelMethods = typeof(IModel<Comment>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<Comment>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Comment___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(Comment);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<Comment>();

                // Act
                var actual = (Comment)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<Comment>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "Body", "HtmlBody", "FontName", "FontColor", "FontSize", "FontIsBold", "HorizontalAlignment", "VerticalAlignment", "AutoSize", "HeightInInches", "WidthInInches", "FillColor", "FillTransparency", "BorderColor", "BorderStyle", "BorderWeightInPoints" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (Comment)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(Comment).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<Comment>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<Comment>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<Comment>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<Comment>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                Comment systemUnderTest1 = null;
                Comment systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    Comment systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                Comment systemUnderTest1 = null;
                Comment systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    Comment systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Comment___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    Comment systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Comment___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Comment___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Comment___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Comment___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}