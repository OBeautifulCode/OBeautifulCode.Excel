// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.87.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Excel.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Drawing;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class RangeStyleTest
    {
        private static readonly StringRepresentationTestScenarios<RangeStyle> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<RangeStyle>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<RangeStyle>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var result = new SystemUnderTestExpectedStringRepresentation<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.Excel.RangeStyle: BackgroundColor = {systemUnderTest.BackgroundColor?.ToString() ?? "<null>"}, FontColor = {systemUnderTest.FontColor?.ToString() ?? "<null>"}, FontName = {systemUnderTest.FontName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontSize = {systemUnderTest.FontSize?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontIsItalic = {systemUnderTest.FontIsItalic?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontIsBold = {systemUnderTest.FontIsBold?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FontUnderline = {systemUnderTest.FontUnderline?.ToString() ?? "<null>"}, FontRotationAngle = {systemUnderTest.FontRotationAngle?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, TextIsWrapped = {systemUnderTest.TextIsWrapped?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IndentLevel = {systemUnderTest.IndentLevel?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, RowHeightInPixels = {systemUnderTest.RowHeightInPixels?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ColumnWidthInPixels = {systemUnderTest.ColumnWidthInPixels?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, VerticalAlignment = {systemUnderTest.VerticalAlignment?.ToString() ?? "<null>"}, HorizontalAlignment = {systemUnderTest.HorizontalAlignment?.ToString() ?? "<null>"}, MergeCells = {systemUnderTest.MergeCells?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, AutofitRows = {systemUnderTest.AutofitRows?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, InsideBorder = {systemUnderTest.InsideBorder?.ToString() ?? "<null>"}, OutsideBorder = {systemUnderTest.OutsideBorder?.ToString() ?? "<null>"}, DataValidation = {systemUnderTest.DataValidation?.ToString() ?? "<null>"}, Format = {systemUnderTest.Format?.ToString() ?? "<null>"}, CustomFormatString = {systemUnderTest.CustomFormatString?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<RangeStyle> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<RangeStyle>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithBackgroundColor should deep clone object and replace BackgroundColor with the provided backgroundColor",
                    WithPropertyName = "BackgroundColor",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.BackgroundColor.IsEqualTo(_.BackgroundColor));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.BackgroundColor,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFontColor should deep clone object and replace FontColor with the provided fontColor",
                    WithPropertyName = "FontColor",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.FontColor.IsEqualTo(_.FontColor));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontColor,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFontName should deep clone object and replace FontName with the provided fontName",
                    WithPropertyName = "FontName",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.FontName.IsEqualTo(_.FontName));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontName,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFontSize should deep clone object and replace FontSize with the provided fontSize",
                    WithPropertyName = "FontSize",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.FontSize.IsEqualTo(_.FontSize));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontSize,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFontIsItalic should deep clone object and replace FontIsItalic with the provided fontIsItalic",
                    WithPropertyName = "FontIsItalic",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.FontIsItalic.IsEqualTo(_.FontIsItalic));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontIsItalic,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFontIsBold should deep clone object and replace FontIsBold with the provided fontIsBold",
                    WithPropertyName = "FontIsBold",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.FontIsBold.IsEqualTo(_.FontIsBold));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontIsBold,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFontUnderline should deep clone object and replace FontUnderline with the provided fontUnderline",
                    WithPropertyName = "FontUnderline",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.FontUnderline.IsEqualTo(_.FontUnderline));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontUnderline,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFontRotationAngle should deep clone object and replace FontRotationAngle with the provided fontRotationAngle",
                    WithPropertyName = "FontRotationAngle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.FontRotationAngle.IsEqualTo(_.FontRotationAngle));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FontRotationAngle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithTextIsWrapped should deep clone object and replace TextIsWrapped with the provided textIsWrapped",
                    WithPropertyName = "TextIsWrapped",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.TextIsWrapped.IsEqualTo(_.TextIsWrapped));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.TextIsWrapped,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithIndentLevel should deep clone object and replace IndentLevel with the provided indentLevel",
                    WithPropertyName = "IndentLevel",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.IndentLevel.IsEqualTo(_.IndentLevel));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.IndentLevel,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithRowHeightInPixels should deep clone object and replace RowHeightInPixels with the provided rowHeightInPixels",
                    WithPropertyName = "RowHeightInPixels",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.RowHeightInPixels.IsEqualTo(_.RowHeightInPixels));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.RowHeightInPixels,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithColumnWidthInPixels should deep clone object and replace ColumnWidthInPixels with the provided columnWidthInPixels",
                    WithPropertyName = "ColumnWidthInPixels",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.ColumnWidthInPixels.IsEqualTo(_.ColumnWidthInPixels));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ColumnWidthInPixels,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithVerticalAlignment should deep clone object and replace VerticalAlignment with the provided verticalAlignment",
                    WithPropertyName = "VerticalAlignment",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.VerticalAlignment.IsEqualTo(_.VerticalAlignment));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.VerticalAlignment,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithHorizontalAlignment should deep clone object and replace HorizontalAlignment with the provided horizontalAlignment",
                    WithPropertyName = "HorizontalAlignment",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.HorizontalAlignment.IsEqualTo(_.HorizontalAlignment));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.HorizontalAlignment,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithMergeCells should deep clone object and replace MergeCells with the provided mergeCells",
                    WithPropertyName = "MergeCells",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.MergeCells.IsEqualTo(_.MergeCells));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.MergeCells,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithAutofitRows should deep clone object and replace AutofitRows with the provided autofitRows",
                    WithPropertyName = "AutofitRows",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.AutofitRows.IsEqualTo(_.AutofitRows));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.AutofitRows,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithInsideBorder should deep clone object and replace InsideBorder with the provided insideBorder",
                    WithPropertyName = "InsideBorder",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.InsideBorder.IsEqualTo(_.InsideBorder));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.InsideBorder,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithOutsideBorder should deep clone object and replace OutsideBorder with the provided outsideBorder",
                    WithPropertyName = "OutsideBorder",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.OutsideBorder.IsEqualTo(_.OutsideBorder));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.OutsideBorder,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithDataValidation should deep clone object and replace DataValidation with the provided dataValidation",
                    WithPropertyName = "DataValidation",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.DataValidation.IsEqualTo(_.DataValidation));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DataValidation,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithFormat should deep clone object and replace Format with the provided format",
                    WithPropertyName = "Format",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.Format.IsEqualTo(_.Format));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Format,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<RangeStyle>
                {
                    Name = "DeepCloneWithCustomFormatString should deep clone object and replace CustomFormatString with the provided customFormatString",
                    WithPropertyName = "CustomFormatString",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<RangeStyle>();

                        var referenceObject = A.Dummy<RangeStyle>().ThatIs(_ => !systemUnderTest.CustomFormatString.IsEqualTo(_.CustomFormatString));

                        var result = new SystemUnderTestDeepCloneWithValue<RangeStyle>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.CustomFormatString,
                        };

                        return result;
                    },
                });

        private static readonly RangeStyle ReferenceObjectForEquatableTestScenarios = A.Dummy<RangeStyle>();

        private static readonly EquatableTestScenarios<RangeStyle> EquatableTestScenarios = new EquatableTestScenarios<RangeStyle>()
            .AddScenario(() =>
                new EquatableTestScenario<RangeStyle>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new RangeStyle[]
                    {
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new RangeStyle[]
                    {
                        new RangeStyle
                            {
                                BackgroundColor     = A.Dummy<RangeStyle>().Whose(_ => !_.BackgroundColor.IsEqualTo(ReferenceObjectForEquatableTestScenarios.BackgroundColor)).BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = A.Dummy<RangeStyle>().Whose(_ => !_.FontColor.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontColor)).FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = A.Dummy<RangeStyle>().Whose(_ => !_.FontName.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontName)).FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = A.Dummy<RangeStyle>().Whose(_ => !_.FontSize.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontSize)).FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = A.Dummy<RangeStyle>().Whose(_ => !_.FontIsItalic.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontIsItalic)).FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = A.Dummy<RangeStyle>().Whose(_ => !_.FontIsBold.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontIsBold)).FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = A.Dummy<RangeStyle>().Whose(_ => !_.FontUnderline.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontUnderline)).FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = A.Dummy<RangeStyle>().Whose(_ => !_.FontRotationAngle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FontRotationAngle)).FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = A.Dummy<RangeStyle>().Whose(_ => !_.TextIsWrapped.IsEqualTo(ReferenceObjectForEquatableTestScenarios.TextIsWrapped)).TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = A.Dummy<RangeStyle>().Whose(_ => !_.IndentLevel.IsEqualTo(ReferenceObjectForEquatableTestScenarios.IndentLevel)).IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = A.Dummy<RangeStyle>().Whose(_ => !_.RowHeightInPixels.IsEqualTo(ReferenceObjectForEquatableTestScenarios.RowHeightInPixels)).RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = A.Dummy<RangeStyle>().Whose(_ => !_.ColumnWidthInPixels.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels)).ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = A.Dummy<RangeStyle>().Whose(_ => !_.VerticalAlignment.IsEqualTo(ReferenceObjectForEquatableTestScenarios.VerticalAlignment)).VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = A.Dummy<RangeStyle>().Whose(_ => !_.HorizontalAlignment.IsEqualTo(ReferenceObjectForEquatableTestScenarios.HorizontalAlignment)).HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = A.Dummy<RangeStyle>().Whose(_ => !_.MergeCells.IsEqualTo(ReferenceObjectForEquatableTestScenarios.MergeCells)).MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = A.Dummy<RangeStyle>().Whose(_ => !_.AutofitRows.IsEqualTo(ReferenceObjectForEquatableTestScenarios.AutofitRows)).AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = A.Dummy<RangeStyle>().Whose(_ => !_.InsideBorder.IsEqualTo(ReferenceObjectForEquatableTestScenarios.InsideBorder)).InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = A.Dummy<RangeStyle>().Whose(_ => !_.OutsideBorder.IsEqualTo(ReferenceObjectForEquatableTestScenarios.OutsideBorder)).OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = A.Dummy<RangeStyle>().Whose(_ => !_.DataValidation.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DataValidation)).DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = A.Dummy<RangeStyle>().Whose(_ => !_.Format.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Format)).Format,
                                CustomFormatString  = ReferenceObjectForEquatableTestScenarios.CustomFormatString,
                            },
                        new RangeStyle
                            {
                                BackgroundColor     = ReferenceObjectForEquatableTestScenarios.BackgroundColor,
                                FontColor           = ReferenceObjectForEquatableTestScenarios.FontColor,
                                FontName            = ReferenceObjectForEquatableTestScenarios.FontName,
                                FontSize            = ReferenceObjectForEquatableTestScenarios.FontSize,
                                FontIsItalic        = ReferenceObjectForEquatableTestScenarios.FontIsItalic,
                                FontIsBold          = ReferenceObjectForEquatableTestScenarios.FontIsBold,
                                FontUnderline       = ReferenceObjectForEquatableTestScenarios.FontUnderline,
                                FontRotationAngle   = ReferenceObjectForEquatableTestScenarios.FontRotationAngle,
                                TextIsWrapped       = ReferenceObjectForEquatableTestScenarios.TextIsWrapped,
                                IndentLevel         = ReferenceObjectForEquatableTestScenarios.IndentLevel,
                                RowHeightInPixels   = ReferenceObjectForEquatableTestScenarios.RowHeightInPixels,
                                ColumnWidthInPixels = ReferenceObjectForEquatableTestScenarios.ColumnWidthInPixels,
                                VerticalAlignment   = ReferenceObjectForEquatableTestScenarios.VerticalAlignment,
                                HorizontalAlignment = ReferenceObjectForEquatableTestScenarios.HorizontalAlignment,
                                MergeCells          = ReferenceObjectForEquatableTestScenarios.MergeCells,
                                AutofitRows         = ReferenceObjectForEquatableTestScenarios.AutofitRows,
                                InsideBorder        = ReferenceObjectForEquatableTestScenarios.InsideBorder,
                                OutsideBorder       = ReferenceObjectForEquatableTestScenarios.OutsideBorder,
                                DataValidation      = ReferenceObjectForEquatableTestScenarios.DataValidation,
                                Format              = ReferenceObjectForEquatableTestScenarios.Format,
                                CustomFormatString  = A.Dummy<RangeStyle>().Whose(_ => !_.CustomFormatString.IsEqualTo(ReferenceObjectForEquatableTestScenarios.CustomFormatString)).CustomFormatString,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void RangeStyle___Should_implement_IModel_of_RangeStyle___When_reflecting()
            {
                // Arrange
                var type = typeof(RangeStyle);

                var expectedModelMethods = typeof(IModel<RangeStyle>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<RangeStyle>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void RangeStyle___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(RangeStyle);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<RangeStyle>();

                // Act
                var actual = (RangeStyle)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<RangeStyle>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.InsideBorder == null)
                {
                    actual.InsideBorder.AsTest().Must().BeNull();
                }
                else
                {
                    actual.InsideBorder.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.InsideBorder);
                }

                if (systemUnderTest.OutsideBorder == null)
                {
                    actual.OutsideBorder.AsTest().Must().BeNull();
                }
                else
                {
                    actual.OutsideBorder.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.OutsideBorder);
                }

                if (systemUnderTest.DataValidation == null)
                {
                    actual.DataValidation.AsTest().Must().BeNull();
                }
                else
                {
                    actual.DataValidation.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.DataValidation);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "BackgroundColor", "FontColor", "FontName", "FontSize", "FontIsItalic", "FontIsBold", "FontUnderline", "FontRotationAngle", "TextIsWrapped", "IndentLevel", "RowHeightInPixels", "ColumnWidthInPixels", "VerticalAlignment", "HorizontalAlignment", "MergeCells", "AutofitRows", "InsideBorder", "OutsideBorder", "DataValidation", "Format", "CustomFormatString" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (RangeStyle)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(RangeStyle).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RangeStyle>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RangeStyle>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RangeStyle>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<RangeStyle>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                RangeStyle systemUnderTest1 = null;
                RangeStyle systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    RangeStyle systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                RangeStyle systemUnderTest1 = null;
                RangeStyle systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    RangeStyle systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RangeStyle___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    RangeStyle systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RangeStyle___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RangeStyle___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RangeStyle___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_RangeStyle___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}