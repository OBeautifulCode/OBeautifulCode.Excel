// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ExcelDummyFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Excel.Test source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Excel.Test
{
    using System;
    using System.Drawing;

    using AutoFakeItEasy;

    using FakeItEasy;

    using OBeautifulCode.Math.Recipes;

    /// <summary>
    /// A Dummy Factory for types in <see cref="Excel"/>.
    /// </summary>
#if !OBeautifulCodeExcelRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Excel.Test", "See package version number")]
    internal
#else
    public
#endif 
    class ExcelDummyFactory : DefaultExcelDummyFactory
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExcelDummyFactory"/> class.
        /// </summary>
        public ExcelDummyFactory()
        {
            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<DataValidation>();

            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(BorderEdges.Unknown);

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var result = Color.FromArgb(ThreadSafeRandom.Next(256), ThreadSafeRandom.Next(256), ThreadSafeRandom.Next(256));

                return result;
            });

            AutoFixtureBackedDummyFactory.AddDummyCreator(() =>
            {
                var worksheetName = "worksheet-" + A.Dummy<Guid>().ToString().Substring(1, 10);

                var rowNumber = A.Dummy<PositiveInteger>().ThatIs(_ => _ <= Constants.MaximumRowNumber);

                var columnNumber = A.Dummy<PositiveInteger>().ThatIs(_ => _ <= Constants.MaximumColumnNumber);

                var result = new CellReference(worksheetName, rowNumber, columnNumber);

                return result;
            });
        }
    }
}
