// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.153.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Excel.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class NumericDataValidationTest
    {
        private static readonly StringRepresentationTestScenarios<NumericDataValidation> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<NumericDataValidation>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<NumericDataValidation>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var result = new SystemUnderTestExpectedStringRepresentation<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.Excel.NumericDataValidation: Kind = {systemUnderTest.Kind.ToString() ?? "<null>"}, Operator = {systemUnderTest.Operator.ToString() ?? "<null>"}, Operand1Formula = {systemUnderTest.Operand1Formula?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Operand2Formula = {systemUnderTest.Operand2Formula?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IgnoreBlank = {systemUnderTest.IgnoreBlank.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShowInputMessage = {systemUnderTest.ShowInputMessage.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, InputMessageTitle = {systemUnderTest.InputMessageTitle?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, InputMessageBody = {systemUnderTest.InputMessageBody?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShowErrorAlertAfterInvalidDataIsEntered = {systemUnderTest.ShowErrorAlertAfterInvalidDataIsEntered.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ErrorAlertStyle = {systemUnderTest.ErrorAlertStyle.ToString() ?? "<null>"}, ErrorAlertTitle = {systemUnderTest.ErrorAlertTitle?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ErrorAlertBody = {systemUnderTest.ErrorAlertBody?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ShowListDropdown = {systemUnderTest.ShowListDropdown.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Operand1NumericValue = {systemUnderTest.Operand1NumericValue?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Operand2NumericValue = {systemUnderTest.Operand2NumericValue?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<NumericDataValidation> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<NumericDataValidation>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithKind should deep clone object and replace Kind with the provided kind",
                    WithPropertyName = "Kind",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.Kind.IsEqualTo(_.Kind));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Kind,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithOperator should deep clone object and replace Operator with the provided @operator",
                    WithPropertyName = "Operator",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.Operator.IsEqualTo(_.Operator));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Operator,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithOperand1Formula should deep clone object and replace Operand1Formula with the provided operand1Formula",
                    WithPropertyName = "Operand1Formula",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.Operand1Formula.IsEqualTo(_.Operand1Formula));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Operand1Formula,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithOperand2Formula should deep clone object and replace Operand2Formula with the provided operand2Formula",
                    WithPropertyName = "Operand2Formula",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.Operand2Formula.IsEqualTo(_.Operand2Formula));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Operand2Formula,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithIgnoreBlank should deep clone object and replace IgnoreBlank with the provided ignoreBlank",
                    WithPropertyName = "IgnoreBlank",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.IgnoreBlank.IsEqualTo(_.IgnoreBlank));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.IgnoreBlank,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithShowInputMessage should deep clone object and replace ShowInputMessage with the provided showInputMessage",
                    WithPropertyName = "ShowInputMessage",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.ShowInputMessage.IsEqualTo(_.ShowInputMessage));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShowInputMessage,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithInputMessageTitle should deep clone object and replace InputMessageTitle with the provided inputMessageTitle",
                    WithPropertyName = "InputMessageTitle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.InputMessageTitle.IsEqualTo(_.InputMessageTitle));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.InputMessageTitle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithInputMessageBody should deep clone object and replace InputMessageBody with the provided inputMessageBody",
                    WithPropertyName = "InputMessageBody",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.InputMessageBody.IsEqualTo(_.InputMessageBody));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.InputMessageBody,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithShowErrorAlertAfterInvalidDataIsEntered should deep clone object and replace ShowErrorAlertAfterInvalidDataIsEntered with the provided showErrorAlertAfterInvalidDataIsEntered",
                    WithPropertyName = "ShowErrorAlertAfterInvalidDataIsEntered",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.ShowErrorAlertAfterInvalidDataIsEntered.IsEqualTo(_.ShowErrorAlertAfterInvalidDataIsEntered));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShowErrorAlertAfterInvalidDataIsEntered,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithErrorAlertStyle should deep clone object and replace ErrorAlertStyle with the provided errorAlertStyle",
                    WithPropertyName = "ErrorAlertStyle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.ErrorAlertStyle.IsEqualTo(_.ErrorAlertStyle));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ErrorAlertStyle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithErrorAlertTitle should deep clone object and replace ErrorAlertTitle with the provided errorAlertTitle",
                    WithPropertyName = "ErrorAlertTitle",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.ErrorAlertTitle.IsEqualTo(_.ErrorAlertTitle));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ErrorAlertTitle,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithErrorAlertBody should deep clone object and replace ErrorAlertBody with the provided errorAlertBody",
                    WithPropertyName = "ErrorAlertBody",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.ErrorAlertBody.IsEqualTo(_.ErrorAlertBody));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ErrorAlertBody,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithShowListDropdown should deep clone object and replace ShowListDropdown with the provided showListDropdown",
                    WithPropertyName = "ShowListDropdown",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.ShowListDropdown.IsEqualTo(_.ShowListDropdown));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ShowListDropdown,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithOperand1NumericValue should deep clone object and replace Operand1NumericValue with the provided operand1NumericValue",
                    WithPropertyName = "Operand1NumericValue",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.Operand1NumericValue.IsEqualTo(_.Operand1NumericValue));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Operand1NumericValue,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<NumericDataValidation>
                {
                    Name = "DeepCloneWithOperand2NumericValue should deep clone object and replace Operand2NumericValue with the provided operand2NumericValue",
                    WithPropertyName = "Operand2NumericValue",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<NumericDataValidation>();

                        var referenceObject = A.Dummy<NumericDataValidation>().ThatIs(_ => !systemUnderTest.Operand2NumericValue.IsEqualTo(_.Operand2NumericValue));

                        var result = new SystemUnderTestDeepCloneWithValue<NumericDataValidation>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Operand2NumericValue,
                        };

                        return result;
                    },
                });

        private static readonly NumericDataValidation ReferenceObjectForEquatableTestScenarios = A.Dummy<NumericDataValidation>();

        private static readonly EquatableTestScenarios<NumericDataValidation> EquatableTestScenarios = new EquatableTestScenarios<NumericDataValidation>()
            .AddScenario(() =>
                new EquatableTestScenario<NumericDataValidation>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new NumericDataValidation[]
                    {
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new NumericDataValidation[]
                    {
                        new NumericDataValidation
                            {
                                Kind                                    = A.Dummy<NumericDataValidation>().Whose(_ => !_.Kind.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Kind)).Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = A.Dummy<NumericDataValidation>().Whose(_ => !_.Operator.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Operator)).Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = A.Dummy<NumericDataValidation>().Whose(_ => !_.Operand1Formula.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Operand1Formula)).Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = A.Dummy<NumericDataValidation>().Whose(_ => !_.Operand2Formula.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Operand2Formula)).Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = A.Dummy<NumericDataValidation>().Whose(_ => !_.IgnoreBlank.IsEqualTo(ReferenceObjectForEquatableTestScenarios.IgnoreBlank)).IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = A.Dummy<NumericDataValidation>().Whose(_ => !_.ShowInputMessage.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShowInputMessage)).ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = A.Dummy<NumericDataValidation>().Whose(_ => !_.InputMessageTitle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.InputMessageTitle)).InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = A.Dummy<NumericDataValidation>().Whose(_ => !_.InputMessageBody.IsEqualTo(ReferenceObjectForEquatableTestScenarios.InputMessageBody)).InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = A.Dummy<NumericDataValidation>().Whose(_ => !_.ShowErrorAlertAfterInvalidDataIsEntered.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered)).ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = A.Dummy<NumericDataValidation>().Whose(_ => !_.ErrorAlertStyle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle)).ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = A.Dummy<NumericDataValidation>().Whose(_ => !_.ErrorAlertTitle.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle)).ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = A.Dummy<NumericDataValidation>().Whose(_ => !_.ErrorAlertBody.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ErrorAlertBody)).ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = A.Dummy<NumericDataValidation>().Whose(_ => !_.ShowListDropdown.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ShowListDropdown)).ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = A.Dummy<NumericDataValidation>().Whose(_ => !_.Operand1NumericValue.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Operand1NumericValue)).Operand1NumericValue,
                                Operand2NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand2NumericValue,
                            },
                        new NumericDataValidation
                            {
                                Kind                                    = ReferenceObjectForEquatableTestScenarios.Kind,
                                Operator                                = ReferenceObjectForEquatableTestScenarios.Operator,
                                Operand1Formula                         = ReferenceObjectForEquatableTestScenarios.Operand1Formula,
                                Operand2Formula                         = ReferenceObjectForEquatableTestScenarios.Operand2Formula,
                                IgnoreBlank                             = ReferenceObjectForEquatableTestScenarios.IgnoreBlank,
                                ShowInputMessage                        = ReferenceObjectForEquatableTestScenarios.ShowInputMessage,
                                InputMessageTitle                       = ReferenceObjectForEquatableTestScenarios.InputMessageTitle,
                                InputMessageBody                        = ReferenceObjectForEquatableTestScenarios.InputMessageBody,
                                ShowErrorAlertAfterInvalidDataIsEntered = ReferenceObjectForEquatableTestScenarios.ShowErrorAlertAfterInvalidDataIsEntered,
                                ErrorAlertStyle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertStyle,
                                ErrorAlertTitle                         = ReferenceObjectForEquatableTestScenarios.ErrorAlertTitle,
                                ErrorAlertBody                          = ReferenceObjectForEquatableTestScenarios.ErrorAlertBody,
                                ShowListDropdown                        = ReferenceObjectForEquatableTestScenarios.ShowListDropdown,
                                Operand1NumericValue                    = ReferenceObjectForEquatableTestScenarios.Operand1NumericValue,
                                Operand2NumericValue                    = A.Dummy<NumericDataValidation>().Whose(_ => !_.Operand2NumericValue.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Operand2NumericValue)).Operand2NumericValue,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<TextDataValidation>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NumericDataValidation___Should_implement_IModel_of_NumericDataValidation___When_reflecting()
            {
                // Arrange
                var type = typeof(NumericDataValidation);

                var expectedModelMethods = typeof(IModel<NumericDataValidation>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<NumericDataValidation>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NumericDataValidation___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(NumericDataValidation);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<NumericDataValidation>();

                // Act
                var actual = (NumericDataValidation)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<NumericDataValidation>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "Kind", "Operator", "Operand1Formula", "Operand2Formula", "IgnoreBlank", "ShowInputMessage", "InputMessageTitle", "InputMessageBody", "ShowErrorAlertAfterInvalidDataIsEntered", "ErrorAlertStyle", "ErrorAlertTitle", "ErrorAlertBody", "ShowListDropdown", "Operand1NumericValue", "Operand2NumericValue" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (NumericDataValidation)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(NumericDataValidation).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<NumericDataValidation>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<NumericDataValidation>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<NumericDataValidation>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<NumericDataValidation>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                NumericDataValidation systemUnderTest1 = null;
                NumericDataValidation systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    NumericDataValidation systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                NumericDataValidation systemUnderTest1 = null;
                NumericDataValidation systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    NumericDataValidation systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DataValidation___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    DataValidation systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((DataValidation)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DataValidation___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((DataValidation)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DataValidation___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((DataValidation)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DataValidation___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((DataValidation)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_DataValidation___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((DataValidation)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_NumericDataValidation___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    NumericDataValidation systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_NumericDataValidation___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_NumericDataValidation___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_NumericDataValidation___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_NumericDataValidation___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}